name: AI Impact Pull Request Trigger
on:
  pull_request:
    branches:
      - master

permissions:
  contents: write
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  trigger_api:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate with Keycloak
        id: keycloak_auth
        run: |
          $authUrl = "http://auth.gftaiimpact.local/realms/ai-impact/protocol/openid-connect/token"
          $headers = @{ "Content-Type" = "application/x-www-form-urlencoded" }
          $body = @{
              client_id  = "ai-impact-client"
              username   = "administrator"
              password   = "Gft@2025"
              scope      = "openid"
              grant_type = "password"
          }

          $response = Invoke-RestMethod -Uri $authUrl -Method Post -Headers $headers -Body $body
          $ACCESS_TOKEN = $response.access_token

          if (-not $ACCESS_TOKEN -or $ACCESS_TOKEN -eq "null") {
              Write-Host "Failed to obtain access token"
              Write-Host ($response | ConvertTo-Json -Depth 10)
              exit 1
          }

          "access_token=$ACCESS_TOKEN" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Trigger Code Review API
        id: send_code_review
        run: |
          Write-Host "Reposit√≥rio: $($env:GITHUB_REPOSITORY)"

          $response = Invoke-RestMethod -Uri "http://api.gftaiimpact.local/ai/review" -Method Post -Headers @{ "Authorization" = "Bearer $env:access_token" } -Body @{
              RunName                   = "CodeReview"
              JobName                   = "DemoCodeReviewerGithub"
              PromptId                  = "CodeReviewer__CodeReviewer_V1_Conventions"
              Llm                       = "${{ vars:LLM }}"
              PullRequestId             = "${{ vars:GITHUB_EVENT_PULL_REQUEST_NUMBER }}"
              RepoName                  = "${{ vars:GITHUB_REPOSITORY }}"
              AdditionalInstructions    = ""
              Conventions               = "Header,Description,Summary,Recomendations,VulnExplanation"
          }

          Write-Host "API Response: $response"

          $jobId = $response.jobId
          Add-Content -Path $env:GITHUB_ENV -Value "job_id=$jobId"

      - name: Monitor Code Review Job Status
        id: monitor_code_review_status
        run: |
          $jobId = "${{ env.job_id }}"
          $jobId = "${{ steps.send_api.outputs.job_id }}"  # Get jobId from previous step output
          $status = "Pending"

          while ($status -ne "Completed") {
              $response = Invoke-RestMethod -Uri "http://api.gftaiimpact.local/ai/jobs/$jobId/status" -Method Get -Headers @{ "Authorization" = "Bearer $env:access_token" }
              $status = $response.status
              Write-Host "Current status: $status"
              Start-Sleep -Seconds 10
          }

          Write-Host "Final status: $status"


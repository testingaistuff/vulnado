name: AI Impact Pull Request Trigger
on:
  pull_request:
    branches:
      - master

permissions:
  contents: write
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  trigger_api:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate with Keycloak
        id: keycloak_auth
        run: |
          TOKEN_RESPONSE=$(curl -s -X POST 'http://auth.gftaiimpact.local/realms/ai-impact/protocol/openid-connect/token' \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -d 'client_id=ai-impact-client' \
            -d "username=administrator" \
            -d "password=Gft@202" \
            -d "scope=openid" \
            -d "grant_type=password")

          ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.access_token')

          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" == "null" ]; then
            echo "Failed to obtain access token"
            echo "$TOKEN_RESPONSE"
            exit 1
          fi

          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Trigger Code Review API
        id: send_code_review
        run: |
          echo "RepositÃ³rio: ${{github.repository}}"
          RESPONSE=$(curl --location 'http://api.gftaiimpact.local/ai/review' \
            --header "Authorization: Bearer ${{ env.access_token }}" \
            --form 'RunName="CodeReview"' \
            --form 'PromptId="CodeReviewer__CodeReviewer_V1_Conventions"' \
            --form 'Llm="${{ vars.LLM }}"' \
            --form 'PullRequestId="${{ github.event.pull_request.number }}"' \
            --form 'RepoName="${{ github.repository }}"' \
            --form 'AdditionalInstructions=""' \
            --form 'Conventions="Header,Description,Summary,Recomendations,VulnExplanation"') 
          echo "API Response: $RESPONSE"
          JOB_ID=$(echo $RESPONSE)
          echo "job_id=$JOB_ID" >> $GITHUB_ENV

      - name: Monitor Code Review Job Status
        id: monitor_code_review_status
        run: |
          JOB_ID=${{ env.job_id }}
          STATUS="Pending"
          while [[ "$STATUS" != "Completed" ]]; do
            RESPONSE=$(curl --location "http://api.gftaiimpact.local/ai/jobs/$JOB_ID/status" \
              --header "Authorization: Bearer ${{ env.access_token }}")
            STATUS=$(echo $RESPONSE | jq -r '.status')
            echo "Current status: $STATUS"
            sleep 10
          done
          echo "Final status: $STATUS"


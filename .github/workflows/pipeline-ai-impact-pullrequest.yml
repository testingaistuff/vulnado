name: AI Impact Pull Request Trigger
on:
  pull_request:
    branches:
      - master

permissions:
  contents: write
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  trigger_api:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate with Keycloak
        id: keycloak_auth
        run: |
          $TOKEN_RESPONSE = Invoke-RestMethod -Method Post -Uri 'http://auth.gftaiimpact.local/realms/ai-impact/protocol/openid-connect/token' `
              -ContentType 'application/x-www-form-urlencoded' `
              -Body @{
                  client_id = 'ai-impact-client'
                  username = 'administrator'
                  password = 'Gft@2025'
                  scope = 'openid'
                  grant_type = 'password'
              } -ErrorAction SilentlyContinue

          $ACCESS_TOKEN = $TOKEN_RESPONSE.access_token

          if ([string]::IsNullOrEmpty($ACCESS_TOKEN) -or $ACCESS_TOKEN -eq "null") {
              Write-Host "Failed to obtain access token"
              Write-Host ($TOKEN_RESPONSE | ConvertTo-Json)
              exit 1
          }

          Write-Output "access_token=$ACCESS_TOKEN" | Add-Content -Path $env:GITHUB_ENV

      - name: Trigger Code Review API
        id: send_code_review
        run: |
          Write-Host "Reposit√≥rio: $($env:GITHUB_REPOSITORY)"

          $RESPONSE = Invoke-RestMethod -Method Post -Uri 'http://api.gftaiimpact.local/ai/review' `
              -Headers @{
                  "Authorization" = "Bearer $($env:access_token)"
              } `
              -Form @{
                  'RunName' = 'CodeReview'
                  'JobName' = 'DemoCodeReviewerGithub'
                  'PromptId' = 'CodeReviewer__CodeReviewer_V1_Conventions'
                  'Llm' = "$($env:LLM)"
                  'PullRequestId' = "$($env:GITHUB_EVENT_PULL_REQUEST_NUMBER)"
                  'RepoName' = "$($env:GITHUB_REPOSITORY)"
                  'AdditionalInstructions' = ''
                  'Conventions' = 'Header,Description,Summary,Recomendations,VulnExplanation'
              }

          Write-Host "API Response: $RESPONSE"
          $JOB_ID = $RESPONSE
          Write-Output "job_id=$JOB_ID" | Add-Content -Path $env:GITHUB_ENV

      - name: Monitor Code Review Job Status
        id: monitor_code_review_status
        run: |
          $JOB_ID = $env:job_id
          $STATUS = "Pending"

          while ($STATUS -ne "Completed") {
              $RESPONSE = Invoke-RestMethod -Method Get -Uri "http://api.gftaiimpact.local/ai/jobs/$JOB_ID/status" `
                  -Headers @{
                      "Authorization" = "Bearer $($env:access_token)"
                  }
              
              $STATUS = $RESPONSE.status
              Write-Host "Current status: $STATUS"
              Start-Sleep -Seconds 10
          }

          Write-Host "Final status: $STATUS"

